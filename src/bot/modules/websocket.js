import WebSocket from "ws";
import {fetchFuturesSymbols} from "../../services/binanceApi.js";
import {handleCoinPriceRequest} from "../../handlers/handleCoinPriceRequest/handleCoinPriceRequest.js";
import {SETTINGS} from "../../settings.js";

const getWsUrl = (streams) => `wss://fstream.binance.com/stream?streams=${streams}`;

/**
 * –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket Binance –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
 */

export const startWebSocket = async (bot) => {
  console.log("–°—Ç–∞—Ä—Ç WebSocket Binance...");

  const symbols = await fetchFuturesSymbols();
  if (symbols.length === 0) return console.error("‚ùå –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –ø—É—Å—Ç, WebSocket –Ω–µ –∑–∞–ø—É—â–µ–Ω.");

  const batchSize = 200;
  const batches = [];

  for (let i = 0; i < symbols.length; i += batchSize) {
    batches.push(symbols.slice(i, i + batchSize));
  }

  console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${batches.length} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ ${batchSize} –º–æ–Ω–µ—Ç.`);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–µ–π –∏ –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
   */

  const priceHistory = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π

  const processCandle = (symbol, candle) => {
    const lowPrice = parseFloat(candle.l); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const highPrice = parseFloat(candle.h); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
    const openPrice = parseFloat(candle.o); // –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
    const currentPrice = parseFloat(candle.c); // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

    let percentChange;
    let direction;

    if (currentPrice > openPrice) {
      percentChange = ((currentPrice - lowPrice) / lowPrice) * 100;
      direction = "üìà –í–´–†–û–°–õ–ê";
    } else {
      percentChange = ((currentPrice - highPrice) / highPrice) * 100;
      direction = "üìâ –£–ü–ê–õ–ê";
    }

    const absChange = Math.abs(percentChange);
    const lastChange = priceHistory[symbol] || 0;

    if (
        absChange >= SETTINGS.handler.priceChangeThreshold
        && absChange >= lastChange + SETTINGS.handler.priceChangeThreshold
    ) {
      console.log(`üöÄ [ALERT] ${symbol.toUpperCase()} ${direction} –Ω–∞ ${absChange.toFixed(2)}% –∑–∞ ${SETTINGS.handler.temporaryCandle}.`);

      if (bot) {
        handleCoinPriceRequest(bot, process.env.CHAT_ID, symbol.slice(0, -4));
      }

      priceHistory[symbol] = absChange;
    }
  };

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –∫ Binance
   */

  const connectWebSocket = (symbolsBatch, index) => {
    console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket ‚Ññ${index + 1}... (${symbolsBatch.length} –º–æ–Ω–µ—Ç)`);

    const streams = symbolsBatch.map((s) => `${s.toLowerCase()}@kline_${SETTINGS.handler.temporaryCandle}`).join("/");

    const wsUrl = getWsUrl(streams);
    const ws = new WebSocket(wsUrl);

    const handleMessage = (message) => {
      // console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Binance: ${message.slice(0, 50)}...`);

      try {
        const data = JSON.parse(message);
        if (data?.data?.k) {
          // console.log(data?.data?.k)
          processCandle(data.data.s.toLowerCase(), data.data.k);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    }

    const handleClose = (index, symbolsBatch) => {
      console.log(`üîÑ WebSocket ${index + 1} –∑–∞–∫—Ä—ã–ª—Å—è. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`);
      setTimeout(() => connectWebSocket(symbolsBatch, index), 5000);
    }

    ws.addEventListener("open", () => console.log(`‚úÖ WebSocket ${index + 1} –Ω–∞ ${symbolsBatch.length} –º–æ–Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç.`));
    ws.addEventListener("error", (error) => console.error(`‚ùå –û—à–∏–±–∫–∞ WebSocket ${index + 1}:`, error));
    ws.addEventListener("message", (event) => handleMessage(event.data));
    ws.addEventListener("close", () => handleClose(index, symbolsBatch));
  };

  batches.forEach((batch, index) => connectWebSocket(batch, index));
};